.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "VoxelDesc 1"
.TH VoxelDesc 1 "2016-03-16" "VoxelDesc r2014-10-25" "VoxelDesc Help"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
VoxelDesc \- a voxel editor driven by a command line, for Java 6 and 7
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
java \-jar voxeldesc.jar
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
VoxelDesc is a voxel editor driven by a command line, for Java 6 and 7, with 2.5D graphics and powerful scripting.
.PP
Typical voxel editors would have you place every single voxel by clicking with the mouse, which is slow, repetitive and error-prone. All the tedium of Minecraft with none of the fun! By contrast, VoxelDesc allows you to say things like \f(CW\*(C`scene.color(red).from(\-2, \-2, \-2).fill(4, 4, 4)\*(C'\fR. This is not for everyone. But in the right hands, it should enable the creation of sophisticated scenes.
.SS "Features and limitations"
.IX Subsection "Features and limitations"
VoxelDesc is a pure voxel editor. A full description of voxels is outside the scope of this manual. Suffice to say, just as an ordinary picture (say, a \s-1GIF\s0) is made of little colored squares arranged in a grid \*(-- called pixels \*(-- a voxel scene is made of little colored \fIcubes\fR which just happen to have a depth as well. That's it. No lighting or other fancy effects. You make voxels stand out from each other by giving them different colors, just like you would in pixel art.
.PP
In theory, VoxelDesc supports scenes of up to 16.7 million voxels (256x256x256). In practice, 10K voxels already slow down the app noticeably. Then again, I have an old machine. \s-1YMMV.\s0
.PP
The scripting language used in VoxelDesc is Javascript, the same as in any web browser, except without the baggage. You can use it to do anything, even write completely unrelated applications on top of VoxelDesc. That's of course pointless, but I saw no reason to restrict this power.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Type the following at the command line (press Enter each time):
.PP
.Vb 4
\&        camera.moveTo(0, 15, \-30);
\&        scene.color(red).from(\-4, \-4, \-4).fill(4, 4, 4);
\&        scene.color(green).from(\-2, \-2, \-2).fill(4, 4, 4);
\&        scene.color(blue).from(0, 0, 0).fill(4, 4, 4);
.Ve
.PP
Ta-daa! You're off to a good start! Now go click all the buttons and see what they do.
.SS "Advanced example"
.IX Subsection "Advanced example"
Open the scripting console and paste in the following code:
.PP
.Vb 6
\&        camera.moveTo(10, 30, \-40);
\&        for (x = 0; x &lt;= 20; x += 2)
\&                for (y = 0; y &lt;= 20; y += 2)
\&                        for (z = 0; z &lt;= 20; z += 2)
\&                                scene.color(x * 10, y * 10, z * 10).dot(x, y, z);
\&        canvas.repaint();
.Ve
.PP
Now press Alt-R, or click the \*(L"Run\*(R" button on the console toolbar.
(You can't use the Enter key because you need it to edit scripts here.)
.PP
Note the call to \f(CW\*(C`canvas.repaint()\*(C'\fR at the end; we
need that in the console, because the console lacks certain
conveniences; it's a \*(L"backstage access\*(R" to VoxelDesc and assumes
you know what you're doing.
.PP
The scripting language used in VoxelDesc is Javascript, because
that's what the Java platform provides by default. A tutorial is
outside the scope of this manual, but feel free to experiment. Try
out the various operations described these pages, and change the
examples to suit your needs. You can't break anything.
.SH "OBJECTS"
.IX Header "OBJECTS"
By default, VoxelDesc exposes just five basic objects to the scripting engine: scene, camera, canvas, app and console. Of these, you're going to use scene and camera 80% of the time. The others are mostly so you can say things like,
.PP
.Vb 3
\&        canvas.repaint();
\&        app.window.setSize(1280, 1024);
\&        console.window.visible = true;
.Ve
.IP "Note for Java programmers" 4
.IX Item "Note for Java programmers"
Yes, those are regular Java properties in the above example. \f(CW\*(C`console.getWindow().setVisible(true);\*(C'\fR works just as well (it's just a JFrame). But Javascript accepts a shorter, friendlier syntax.
.PP
In addition, VoxelDesc offers you 13 predefined colors: black, blue, cyan, dgray, gray, green, lgray, magenta, orange, pink, red, white and yellow. Considering you can modify each of them with \f(CW\*(C`.brighter()\*(C'\fR and \f(CW\*(C`.darker()\*(C'\fR, that gives you 39 predefined colors on the command line. But you can create any shade with \f(CW\*(C`scene.color(r, g, b)\*(C'\fR, or the Palette dialog in the \s-1GUI.\s0
.IP "Note for Java programmers" 4
.IX Item "Note for Java programmers"
You'll notice this list corresponds to the constants in java.awt.Color; it's a selection as good as any other.
.SH "AUTHORS"
.IX Header "AUTHORS"
VoxelDesc was designed and coded by Felix PleXoianu, <http://felix.plesoianu.ro/>.
.SH "BUGS"
.IX Header "BUGS"
You can signal any problems you have to the project's issue tracker on GitHub: <https://github.com/felixplesoianu/voxeldesc/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For details on using the \s-1API,\s0 see the app's built-in documentation.
